- Experiment with adding full ARGB32 support for each GlyphRenderer
  texture.

- Add a Pango Markup "pre-parser" that will give us additional 
  inputs for user-defined color values.

- Add GlyphCache loading from images/metadata.

- Add the ability to dump the caches in one large PNG, instead of a
  bunch of pngs.

- Create a generic, layer-combining shader, so that we can avoid
  having to create custom shaders on the fly and can instead
  just set various Uniforms to indicate the paramaters.
  PSUEDOCODE:

  	uniform pangoNumLayers;
	uniform pangoIndices[8];

	vec3 osgPango_GetFragment(...) {
		for(int i=0; i < pangoNumLayers; i++) {
			float alpha = samper2D(pangoTextures[pangoIndices[i]], pangoTexCoord.st).a;
			vec3 color = pangoColors[pangoIndices[i]];

			combine_with_previous_layer(...);
		}
	}

  The problem with this approach is that it seems (unconfirmed, but I've
  seen it personally) that GLSL can't use array indices that aren't
  resolvable at compile time. :(

- Investigate expanding the following code to address the PREVIOUS TODO item:

vec4 osgPango_GetFragment(vec4 coord, sampler2D textures[8], vec3 colors[8], float alpha) {
	float alpha0 = texture2D(textures[1], coord.st).a;
	float alpha1 = texture2D(textures[0], coord.st).a;
	
	vec3 color0 = colors[1];
	vec3 color1 = colors[0];

	return mix(vec4(color0, alpha0), vec4(color1, alpha1), alpha1 * alpha);
}
