// -*-c++-*- osgPango - Copyright (C) 2008 Jeremy Moles

#ifndef OSGPANGO_TEXT
#define OSGPANGO_TEXT

#include <iostream>
#include <osg/Geode>
#include <osgPango/String>
#include <osgPango/Font>

namespace osgPango {

class Layout;

struct Renderer {
	PangoRenderer parent_instance;
	Layout*         text;
	unsigned int  count;
};

struct RendererClass {
	PangoRendererClass class_instance;
};

class Layout {
public:
	enum Alignment {
		ALIGN_LEFT,
		ALIGN_CENTER,
		ALIGN_RIGHT,
		ALIGN_JUSTIFY
	};

	Layout(Font* = 0, GlyphEffectsMethod = GLYPH_EFFECTS_METHOD_DEFAULT);

	~Layout() {
		g_object_unref(_layout);
	}
	
	// Our virtual method all implementations must override.
	virtual bool textUpdated(GlyphGeometryVector*) = 0;

	void setLayout       (const std::string&);
	void setAlignment    (Alignment);
	void setWidth        (unsigned int);
	void setColor        (const osg::Vec3&);
	void setEffectsColor (const osg::Vec3&);
	void setAlpha        (double);

	Font* getFont() {
		return _font.get();
	}

	const Font* getFont() const {
		return _font.get();
	}

	osg::Vec3 getColor() {
		return _color;
	}

	const osg::Vec3& getColor() const {
		return _color;
	}

	osg::Vec3 getEffectsColor() {
		return _effectsColor;
	}

	const osg::Vec3& getEffectsColor() const {
		return _effectsColor;
	}

	double getAlpha() const {
		return _alpha;
	}

	osg::Vec2 getSize() {
		return _size;
	}

	const osg::Vec2& getSize() const {
		return _size;
	}

	osg::Vec2 getEffectsSize() {
		return _effectsSize;
	}

	const osg::Vec2& getEffectsSize() const {
		return _effectsSize;
	}

	osg::Vec2 getOrigin() {
		return _origin;
	}

	const osg::Vec2& getOrigin() const {
		return _origin;
	}

	unsigned int getBaseline() const {
		return _baseline;
	}

	osg::Vec2 getOriginBaseline   () const;
	osg::Vec2 getOriginTranslated () const;

	static void drawGlyphs    (PangoRenderer*, PangoFont*, PangoGlyphString*, int, int);
	static void drawRectangle (PangoRenderer*, PangoRenderPart, int, int, int, int);

	static void drawTrapezoid(
		PangoRenderer*,
		PangoRenderPart,
		double,
		double,
		double,
		double,
		double,
		double
	);

	static void cleanup() {
		g_object_unref(_renderer);
	}

private:
	static Renderer* _renderer;

	osg::ref_ptr<Font>  _font;
	String              _text;
	PangoLayout*        _layout;
	GlyphPositionList   _pos;
	GlyphEffectsMethod  _gem;
	GlyphGeometryVector _ggv;
	osg::Vec3           _color;
	osg::Vec3           _effectsColor;
	double              _alpha;
	osg::Vec2           _size;
	osg::Vec2           _effectsSize;
	osg::Vec2           _origin;
	unsigned int        _baseline;
};

}

#endif
