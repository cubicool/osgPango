// -*-c++-*- osgPango - Copyright (C) 2008 Jeremy Moles

#ifndef OSGPANGO_CONTEXT
#define OSGPANGO_CONTEXT

#include <pango/pangocairo.h>

#include <osgPango/Glyph>
#include <osgPango/Text>

namespace osgPango {

typedef std::list<std::string> FontList;

struct OSGPANGO_EXPORT Renderer {
	PangoRenderer parent_instance;
};

struct OSGPANGO_EXPORT RendererClass {
	PangoRendererClass class_instance;
};

class OSGPANGO_EXPORT Context {
public:
	~Context();

	static Context& instance();

	// This is the "entry" into our system from Pango's rendering backend.
	static void drawGlyphs(PangoRenderer*, PangoFont*, PangoGlyphString*, int, int);

	bool init(
		unsigned int                 = 72,
		osgCairo::CairoAntialias     = CAIRO_ANTIALIAS_SUBPIXEL,
		osgCairo::CairoHintStyle     = CAIRO_HINT_STYLE_FULL,
		osgCairo::CairoSubpixelOrder = CAIRO_SUBPIXEL_ORDER_RGB
	);

	unsigned int         getFontList           (FontList&, bool = true);
	GlyphCache*          getGlyphCache         (PangoFont*, const std::string&);
	const GlyphRenderer* getGlyphRenderer      (const std::string&) const;
	void                 drawLayout            (Text*, PangoLayout*, int, int);
	void                 setTextureSize        (unsigned int, unsigned int);
	void                 writeCachesToPNGFiles (const std::string&);
	bool                 addGlyphRenderer      (const std::string&, GlyphRenderer*);

	const osg::Vec3& getCurrentColor() const {
		return _color;
	}

	PangoFontMap* getPangoFontMap() {
		return _pfMap;
	}

	PangoContext* getPangoContext() {
		return _pContext;
	}

private:
	typedef std::pair<PangoFont*, std::string>                        GlyphCacheFontMapKey;
	typedef std::map<GlyphCacheFontMapKey, osg::ref_ptr<GlyphCache> > GlyphCacheFontMap;
	typedef std::map<std::string, osg::ref_ptr<GlyphRenderer> >       GlyphRendererMap;

	Context();

	static Context _context;
	
	GlyphRendererMap   _grMap;
	GlyphCacheFontMap  _gcfMap;
	PangoFontMap*      _pfMap;
	PangoContext*      _pContext;
	Renderer*          _renderer;
	Text*              _text;
	OpenThreads::Mutex _mutex;
	osg::Vec3          _color;
	unsigned int       _textureWidth;
	unsigned int       _textureHeight;
};

}

#endif
