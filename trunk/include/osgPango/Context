// -*-c++-*- Copyright (C) 2011 osgPango Development Team
// $Id$

#ifndef OSGPANGO_CONTEXT
#define OSGPANGO_CONTEXT

#include <pango/pangocairo.h>

#include <osgPango/GlyphRenderer>

namespace osgPango {

//! An std::pair of OSG color values which we use in a few places as "key" values for
//! differentiating Geometry states based on a foreground AND background (effects)
//! color.
typedef std::pair<osg::Vec3, osg::Vec3> ColorPair;

//! TODO: Talk about how this is different from ColorPair and WHY we can't do 8 colors
//! from Pango markup.
typedef std::vector<osg::Vec3> ColorPalette;

//! A list of string names of available fonts recognized by Pango; used
//! in Context::getFontList().
typedef std::list<std::string> FontList;

//! An internal-use-only struct for interfacing with Pango. Ignore this.
struct OSGPANGO_EXPORT Renderer {
	PangoRenderer parent_instance;
};

//! Another internal-use-only struct for interfacing with Pango. Ignore this.
struct OSGPANGO_EXPORT RendererClass {
	PangoRendererClass class_instance;
};

//! These callbacks are invoked when a new Renderer object is added to the Context.
//! This lets you do things  at load/unload time. One user, for example, informed
//! me that he used this callback to implement static loading/unloading for already-cached
//! glyphs. INTERESTING...
class RendererCallback : public osg::Object {
public:
	//! You just get a pointer to the GlyphRenderer; if you need its name, you can 
	//! retrieve it via ::getName().
	virtual void operator()(GlyphRenderer* renderer) = 0;
};

//! TODO: DOCUMENT THE CRAP OUT OF THIS!!!
class OSGPANGO_EXPORT ContextDrawable {
public:
	//! Anything that wants to be called by the Context (or rather, "layed out") must define
	//! this method.
	virtual void drawGlyphs(PangoFont* font, PangoGlyphString* glyphs, int x, int y) = 0;
};

//! This class is a singleton which provides a gateway both into our Pango rendering
//! backend and allows us to configure various global settings such as subpixel hinting
//! and rendering DPI. Before osgPango can be used, the singleton object must be
//! initialized once by calling Context::instance().init(), which is generally
//! enough for most people without using any advanced arguments.
class OSGPANGO_EXPORT Context {
public:
	//! This type maps the string names of your GlyphRenderer objects to their actual
	//! instances.
	typedef std::map<std::string, osg::ref_ptr<GlyphRenderer> > GlyphRendererMap;
	
	~Context();

	//! Returns and/or creates our static singleton reference.
	static Context& instance();

	//! This is the "entry" into our system from Pango's rendering backend.
	//! Technically, it is a callback routine required by the Pango API for custom
	//! rendering, thus it is static and not safe to call from multiple threads.
	//! I have it on good word (from Behdad himself) that eventually Pango will
	//! support multithreading. In the meantime, if anyone can think of a way to use
	//! an instance's member function as a traditional callback routine for C,
	//! please let me know. :) Otherwise, you never have to interact with this function
	//! yourself, so this may go largely unnoticed.
	static void drawGlyphs(
		PangoRenderer*    renderer,
		PangoFont*        font,
		PangoGlyphString* glyphString,
		int               x,
		int               y
	);
	
	//! Our main Context initialization routine; should only need to be called once
	//! per program's lifetime, unless you first call reset(). It lets us set
	//! some of the more advanced rendering options of osgPango, so take special note of
	//! the arguments below and what they mean. Please keep in mind that not ALL of the
	//! options are honored on every Pango backend; though the most common backend, FreeType,
	//! appears to support them all (whereas a few don't always work using ClearType).
	bool init(
		//! The rendering DPI to be used when Pango calculates font sizes
		//! internally. This does not--as you might want to think at first--
		//! directly affect font QUALITY, but instead only the way in which
		//! a "point" size is calculated. For example, using the default DPI
		//! of 72 means that a 12pt font actually ends up being a 12px font,
		//! and indeed this is why I chose 72 as the osgPango default DPI.
		//! If, however, you change your DPI to a more common value such
		//! as 96 (which is what most OS's tend to use by default) then
		//! a 12pt font ends up being a 16px font (96.0 / 72.0 * 12). At
		//! any rate, using the Pango Markup Language you can always force
		//! the rendering backend to use pixel units when calculating size
		//! (instead of the default points) by postfixing each size value
		//! with the text "px", such as <span font="sans 12px"/>.
		unsigned int dpi = 72,

		//! This osgCairo::CairoAntialias enum defines what kind of
		//! antialiasing style should be used by the rendering backend. Please see
		//! <a href="http://www.cairographics.org/manual/cairo-context.html#cairo-antialias-t">
		//! this Cairo API reference link</a> for more information on what each
		//! possible value means. The osgPango Context default is CAIRO_ANTIALIAS_SUBPIXEL.
		cairo_antialias_t aa = CAIRO_ANTIALIAS_SUBPIXEL,

		//! This osgCairo::CairoHintStyle enum defines what kind of
		//! hinting style should be used by the rendering backend. Please see
		//! <a href="http://www.cairographics.org/manual/cairo-font-options.html#cairo-hint-style-t">
		//! this Cairo API reference link</a> for more information on what each
		//! possible value means. The osgPango Context default is CAIRO_HINT_STYLE_FULL.
		cairo_hint_style_t hs = CAIRO_HINT_STYLE_FULL,

		//! This osgCairo::CairoSubpixelOrder enum defines what kind of
		//! subpixel ordering style should be used by the rendering backend
		//! If CAIRO_ANTIALIAS_SUBPIXEL is set. Please see
		//! <a href="http://www.cairographics.org/manual/cairo-font-options.html#cairo-subpixel-order-t">
		//! this Cairo API reference link</a> for more information on what each
		//! possible value means. The osgPango Context default is
		//! CAIRO_SUBPIXEL_ORDER_DEFAULT.
		cairo_subpixel_order_t spo = CAIRO_SUBPIXEL_ORDER_DEFAULT
	);

	//! Populates a FontList object and, optionally, whether or not you want
	//! to includes the various faces available to this font such as
	//! Bold, Italic, etc. By default, face reporting is turned on. Returns
	//! the number of available fonts.
	unsigned int getFontList(FontList& fontList, bool faces = true);
	
	//! This is the method called by ContextDrawables (and in fact, they pass the
	//! "this" pointer as the @drawable argument) to begin the layout process. It will,
	//! in turn, invoke the drawGlyphs method of the ContextDrawable in question.
	void drawLayout(ContextDrawable* drawable, PangoLayout* layout, int x, int y);
	
	//! Returns the numbers of bytes used by each Image object in each GlyphCache's 
	//! layer container.
	unsigned long getMemoryUsageInBytes() const;
	
	//! This method will allow you to retrieve a read-write pointer to any custom
	//! GlyphRenderer object installed in the Context. USE WITH CAUTION!
	GlyphRenderer* getGlyphRenderer(const std::string& renderer) {
		return _getGlyphRenderer(renderer);
	}
	
	//! This method will allow you to retrieve a read-only pointer to any custom 
	//! GlyphRenderer object you may have installed into the Context at a previous
	//! time. For more about what this  means exactly, take a look at the documentation
	//! for GlyphRenderer.
	const GlyphRenderer* getGlyphRenderer(const std::string& renderer) const {
		return _getGlyphRenderer(renderer);
	}
	
	//! An empty string is key the GlyphRendererMap's default renderer. This gets setup
	//! when the Context is created.
	const GlyphRenderer* getDefaultGlyphRenderer() const {
		return _getGlyphRenderer("DEFAULT");
	}

	//! Set the GlyphRenderer using the string "DEFAULT".
	void setDefaultGlyphRenderer(GlyphRenderer* renderer);

	//! Add a newly created GlyphRenderer object to the internal cache of known 
	//! renderers within the Context. For more information about what
	//! a GlyphRenderer is (basically, a custom effects "plugin" for your font),
	//! please take a look at it's documentation.
	void addGlyphRenderer(const std::string& name, GlyphRenderer* renderer);
	
	//! Remove a previously created GlyphRenderer.
	void removeGlyphRenderer(const std::string& name);

	//! Get a READ-ONLY const reference to the GlyphRendererMap. Use this with caution...
	const GlyphRendererMap& getGlyphRenderers() const {
		return _grMap;
	}

	void setGravity(PangoGravity gravity) {
		_gravity = gravity;
	}

	void setGravityHint(PangoGravityHint hint) {
		_gravityHint = hint;
	}

	PangoGravity getGravity() const {
		return _gravity;
	}

	PangoGravityHint getGravityHint() const {
		return _gravityHint;
	}

	//! Returns the currently set color and effects color ColorPair object set on
	//! the Context. If this makes you feel dirty, you probably know too much about
	//! how osgPango and Pango work together. :)
	const ColorPair& getColorPair() const {
		return _color;
	}

	//! Returns a pointer to the PangoFontMap member. There isn't much you can do
	//! with this pointer, although it is used internally during various rendering
	//! phases.
	PangoFontMap* getPangoFontMap() {
		return _pfMap;
	}

	//! Returns a pointer to the PangoContext member. Again, like getPangoFontMap(),
	//! there isn't much to see here.
	PangoContext* getPangoContext() {
		return _pContext;
	}

	RendererCallback* getOnAddCallback() const {
		return _onAddCallback.get();
	}

	RendererCallback* getOnRemoveCallback() const {
		return _onRemoveCallback.get();
	}

	//! Set the callback to be invoked when new GlyphRenderers are added.
	void setOnAddCallback(RendererCallback* callback) {
		_onAddCallback = callback;
	}
		
	//! Set the callback to be invoked when GlyphRenderers are deleted.
	void setOnRemoveCallback(RendererCallback* callback) {
		_onRemoveCallback = callback;
	}
	
	//! Reset the Context, so that init() can be called again. All data is cleared
	//! internally, so be careful when you call this.
	void reset();
	
private:
	//! Our constructor is private; Singleton.
	Context();
	
	GlyphRenderer* _getGlyphRenderer(const std::string&) const;

	static Context _context;
	
	GlyphRendererMap               _grMap;
	PangoFontMap*                  _pfMap;
	PangoContext*                  _pContext;
	PangoGravity                   _gravity;
	PangoGravityHint               _gravityHint;
	Renderer*                      _renderer;
	ContextDrawable*               _drawable;
	OpenThreads::Mutex             _mutex;
	ColorPair                      _color;
	unsigned int                   _textureWidth;
	unsigned int                   _textureHeight;
	osg::ref_ptr<RendererCallback> _onAddCallback;
	osg::ref_ptr<RendererCallback> _onRemoveCallback;
};

}

#endif
