// -*-c++-*- osgPango - Copyright (C) 2008 Jeremy Moles

#ifndef OSGPANGO_GLYPHCACHE
#define OSGPANGO_GLYPHCACHE

#include <map>
#include <osg/Geometry>
#include <osgCairo/SurfaceImage>

namespace osgPango {

class Font;

const unsigned int DEFAULT_GCW = 512;
const unsigned int DEFAULT_GCH = 512;

struct CachedGlyph {
	CachedGlyph(
		unsigned int     = 0,
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2()
	);

	unsigned int img;
	osg::Vec2    origin;
	osg::Vec2    size;
	osg::Vec2    bl;
	osg::Vec2    br;
	osg::Vec2    ur;
	osg::Vec2    ul;
};

typedef std::pair<unsigned int, osg::Vec2> GlyphPositionPair;
typedef std::list<GlyphPositionPair>       GlyphPositionList;

enum GlyphEffectsMethod {
	GLYPH_EFFECTS_METHOD_DEFAULT,
	GLYPH_EFFECTS_METHOD_GLSL
};

// There is one GlyphCache object PER FONT object.
class GlyphCache: public osg::Referenced {
public:
	typedef std::map<unsigned int, CachedGlyph>                GlyphMap;
	typedef std::vector<osg::ref_ptr<osgCairo::SurfaceImage> > ImageVector;

	GlyphCache(unsigned int = 0, unsigned int = 0, bool = false);

	const CachedGlyph* getCachedGlyph     (unsigned int);
	const CachedGlyph* createCachedGlyph  (PangoFont*, PangoGlyphInfo*);
	void               writeImagesAsFiles (const std::string&) const;

	// This method returns an osg::Vec4 object whose values correspond to the following:
	// the x origin offset, y origin offset, extra width, and extra height respectively.
	// It is used when custom "effects" implementations needs to inform the cache object
	// that additional space should be required for proper positioning.
	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);
	
	virtual bool renderGlyphEffects(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

	osgCairo::SurfaceImage* getImage(unsigned int index, bool effects = false) {
		return _getImage(index, effects);
	}

	const osgCairo::SurfaceImage* getImage(unsigned int index, bool effects = false) const {
		return _getImage(index, effects);
	}

	unsigned int getNumImages() const {
		return _images.size();
	}

	bool hasEffects() const {
		return _hasEffects;
	}

private:
	bool _newImage(ImageVector&);

	void _writeImageVectorFiles(
		const std::string&,
		const std::string&,
		const ImageVector&
	) const;

	osgCairo::SurfaceImage* _getImage(unsigned int, bool) const;

	// A container of texture image data where the glyphs are cached.
	ImageVector _images;
	ImageVector _effects;

	// A map of external Pango glyph indexes to their internally CachedGlyph data structures.
	// We also have a flag of what effects to use, though their rendering method is passed
	// on from the text object.
	GlyphMap _glyphs;

	double       _x;
	double       _y;
	double       _h;
	unsigned int _imgWidth;
	unsigned int _imgHeight;
	bool         _hasEffects;
};

class GlyphGeometry: public osg::Geometry {
public:
	GlyphGeometry(bool = false);

	bool finalize(osg::Image*, osg::Image*, const osg::Vec3&, const osg::Vec3&, double);

	bool pushCachedGlyphAt(const CachedGlyph*, const osg::Vec2&, bool, GlyphEffectsMethod);

private:
	static osg::ref_ptr<osg::Vec3Array> _norms;
	static osg::ref_ptr<osg::Vec4Array> _cols;

	unsigned int _numQuads;
};

typedef std::vector<GlyphGeometry*> GlyphGeometryVector;

class GlyphCacheOutline: public GlyphCache {
public:
	GlyphCacheOutline(unsigned int, unsigned int, unsigned int = 2);

	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

	virtual bool renderGlyphEffects(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

private:
	unsigned int _outline;
};

class GlyphCacheShadowOffset: public GlyphCache {
public:
	GlyphCacheShadowOffset(unsigned int, unsigned int, int = 1, int = 1);

	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

	virtual bool renderGlyphEffects(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

private:
	int _xOffset;
	int _yOffset;
};

class GlyphCacheShadowGaussian: public GlyphCache {
public:
	GlyphCacheShadowGaussian(unsigned int, unsigned int, unsigned int);

	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

	virtual bool renderGlyphEffects(
		osgCairo::SurfaceImage*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

private:
	unsigned int _radius;
};

}

#endif
