// -*-c++-*- osgPango - Copyright (C) 2008 Jeremy Moles

#ifndef OSGPANGO_GLYPHCACHE
#define OSGPANGO_GLYPHCACHE

#include <map>
#include <osg/Geometry>
#include <osg/Texture>
#include <osgCairo/Image>
#include <osgPango/Export>

namespace osgPango {

class Font;

struct OSGPANGO_EXPORT CachedGlyph {
	CachedGlyph(
		unsigned int     = 0,
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2()
	);

	unsigned int img;
	osg::Vec2    origin;
	osg::Vec2    size;
	osg::Vec2    bl;
	osg::Vec2    br;
	osg::Vec2    ur;
	osg::Vec2    ul;
};

// This object packages up all the state stuff we need to shimmy around.
struct OSGPANGO_EXPORT GlyphGeometryState {
	GlyphGeometryState(
		osg::Texture*,
		osg::Texture*,
		const osg::Vec3&,
		const osg::Vec3&,
		double
	);

	osg::Texture* texture;
	osg::Texture* effectsTexture;
	osg::Vec3     color;
	osg::Vec3     effectsColor;
	double        alpha;
};

typedef std::pair<unsigned int, osg::Vec2> GlyphPositionPair;
typedef std::list<GlyphPositionPair>       GlyphPositionList;

enum GlyphEffectsMethod {
	GLYPH_EFFECTS_METHOD_DEFAULT,
	GLYPH_EFFECTS_METHOD_GLSL
};

class OSGPANGO_EXPORT GlyphRenderer: public osg::Referenced {
public:
	virtual bool hasEffects() const {
		return false;
	}

	// This method returns an osg::Vec4 object whose values correspond to the following:
	// the x origin offset, y origin offset, extra width, and extra height respectively.
	// It is used when custom "effects" implementations needs to inform the cache object
	// that additional space should be required for proper positioning.
	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);
	
	virtual bool renderGlyphEffects(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);
};

// There is one GlyphCache object PER FONT object.
class OSGPANGO_EXPORT GlyphCache: public osg::Referenced {
public:
	typedef std::map<unsigned int, CachedGlyph>           GlyphMap;
	typedef std::vector<osg::ref_ptr<osgCairo::Image> >   ImageVector;
	typedef std::vector<osg::observer_ptr<osg::Texture> > TextureVector;

	GlyphCache(GlyphRenderer* = 0, unsigned int = 0, unsigned int = 0);

	const CachedGlyph* getCachedGlyph     (unsigned int);
	const CachedGlyph* createCachedGlyph  (PangoFont*, PangoGlyphInfo*);
	void               writeImagesAsFiles (const std::string&) const;

	osgCairo::Image* getImage(unsigned int index, bool effects = false) {
		return _getImage(index, effects);
	}

	const osgCairo::Image* getImage(unsigned int index, bool effects = false) const {
		return _getImage(index, effects);
	}

	osg::Texture* getTexture(unsigned int index, bool effects = false) {
		return _getTexture(index, effects);
	}

	const osg::Texture* getTexture(unsigned int index, bool effects = false) const {
		return _getTexture(index, effects);
	}

	unsigned int getNumImages() const {
		return _images.size();
	}

	unsigned int getImageWidth() const {
		return _imgWidth;
	}

	unsigned int getImageHeight() const {
		return _imgHeight;
	}

	GlyphRenderer* getGlyphRenderer() {
		return _renderer.get();
	}

	const GlyphRenderer* getGlyphRenderer() const {
		return _renderer.get();
	}

private:
	bool _newImageAndTexture(ImageVector&, TextureVector&);

	void _writeImageVectorFiles(
		const std::string&,
		const std::string&,
		const ImageVector&
	) const;

	osgCairo::Image* _getImage   (unsigned int, bool) const;
	osg::Texture*    _getTexture (unsigned int, bool) const;

	// The "renderer" object, not bound to any local data.
	osg::ref_ptr<GlyphRenderer> _renderer;

	// A container of texture image data where the glyphs are cached.
	ImageVector   _images;
	ImageVector   _effects;
	TextureVector _textures;
	TextureVector _effectsTextures;

	// A map of external Pango glyph indexes to their internally CachedGlyph data structures.
	// We also have a flag of what effects to use, though their rendering method is passed
	// on from the text object.
	GlyphMap _glyphs;

	double       _x;
	double       _y;
	double       _h;
	unsigned int _imgWidth;
	unsigned int _imgHeight;
};

bool setGlyphGeometryState (osg::Drawable*, const GlyphGeometryState&);
bool setGlyphGeometryState (osg::Node*, const GlyphGeometryState&);

class OSGPANGO_EXPORT GlyphGeometry: public osg::Geometry {
public:
	GlyphGeometry(bool = false);

	bool finalize          (const GlyphGeometryState&);
	bool pushCachedGlyphAt (const CachedGlyph*, const osg::Vec2&, bool, GlyphEffectsMethod);

private:
	static osg::ref_ptr<osg::Vec3Array> _norms;
	static osg::ref_ptr<osg::Vec4Array> _cols;

	unsigned int _numQuads;
};

// We don't use an osg::ref_ptr here becase the Geometry will actually only be temporary.
// The newly allocated osg::Geometry will passed to an osg::Geode during finalize, and
// the Geode will properly dictate when the resources are freed.
typedef std::vector<GlyphGeometry*> GlyphGeometryVector;

class OSGPANGO_EXPORT GlyphRendererOutline: public GlyphRenderer {
public:
	GlyphRendererOutline(unsigned int = 2);

	virtual bool hasEffects() const {
		return true;
	}

	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

	virtual bool renderGlyphEffects(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

private:
	unsigned int _outline;
};

class OSGPANGO_EXPORT GlyphRendererShadowOffset: public GlyphRenderer {
public:
	GlyphRendererShadowOffset(int = 1, int = 1);

	virtual bool hasEffects() const {
		return true;
	}
	
	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

	virtual bool renderGlyphEffects(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

private:
	int _xOffset;
	int _yOffset;
};

/*
class OSGPANGO_EXPORT GlyphRendererShadowGaussian: public GlyphRenderer {
public:
	GlyphRendererShadowGaussian(unsigned int, unsigned int, unsigned int);

	virtual osg::Vec4 getExtraGlyphExtents() const;

	virtual bool renderGlyph(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

	virtual bool renderGlyphEffects(
		osgCairo::Image*,
		const osgCairo::Glyph&,
		unsigned int,
		unsigned int
	);

private:
	unsigned int _radius;
};
*/

}

#endif
