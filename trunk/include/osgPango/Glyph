// -*-c++-*- Copyright (C) 2011 osgPango Development Team
// $Id$

#ifndef OSGPANGO_GLYPHCACHE
#define OSGPANGO_GLYPHCACHE

#include <map>
#include <osg/Geometry>
#include <osg/Texture>
#include <osgCairo/Image>
#include <osgPango/Export>

#include <pango/pangocairo.h>

namespace osgPango {

class Font;
class GlyphRenderer;

//! A small convenience structure used internally by the caching object to keep track
//! of the various bits of positioning, sizing, and image index information for each
//! glyph it manages.
struct OSGPANGO_EXPORT CachedGlyph {
	CachedGlyph(
		unsigned int     img    = 0,
		const osg::Vec2& origin = osg::Vec2(),
		const osg::Vec2& size   = osg::Vec2(),
		const osg::Vec2& bl     = osg::Vec2(),
		const osg::Vec2& br     = osg::Vec2(),
		const osg::Vec2& ur     = osg::Vec2(),
		const osg::Vec2& ul     = osg::Vec2()
	);

	unsigned int img;
	osg::Vec2    origin;
	osg::Vec2    size;
	osg::Vec2    bl;
	osg::Vec2    br;
	osg::Vec2    ur;
	osg::Vec2    ul;
};

//! There is one GlyphCache object PER FONT object (determined by the font hash). GlyphRenderer objects
//! contain the GlyphCaches.
class OSGPANGO_EXPORT GlyphCache: public osg::Referenced {	
public:
	//! This type maps the glyph's numeric index to the CachedGlyph structure.
	typedef std::map<unsigned int, CachedGlyph> GlyphMap;

	//! This type represents the osgCairo::Image and Texture2D stored internally for a single "page"
	//! of the glyph texture atlas.
	typedef std::pair<osg::ref_ptr<osgCairo::Image>, osg::ref_ptr<osg::Texture> > CairoAndTexture;

	//! This type contains a single Image/Texture combo for EACH page of the texture atlas.
	typedef std::vector<CairoAndTexture> Images;

	//! Since a GlyphRenderer may contain many layers per glyph, this last type represents each
	//! layer, numerically ordered.
	typedef std::vector<Images> Layers;

	//! This constructor is generally only called by the GlyphRenderer; it passes itself in as the 
	//! "parent" and also, optionally, defines a size for the Image/Tetures used internally.
	GlyphCache(GlyphRenderer* renderer = 0, unsigned int textureWidth = 0, unsigned int textureHeight = 0);

	//! Returns the CachedGlyph structure data associated with the given glyph index.
	const CachedGlyph* getCachedGlyph(unsigned int glyph);

	//! Creates the CachedGlyph (if it doesn't exists) based on the passed in glyph information
	//! and returns it; if the glyph already exists, it is simply returned.
	const CachedGlyph* createCachedGlyph(PangoFont* font, PangoGlyphInfo* glyphInfo);

	//! A utility function for dumping all of the internal osgCairo::Image data to disk. The format
	//! of the resultant images is prepended with the string @prefix.
	void writeImagesAsFiles(const std::string& prefix) const;

	//! Returns the amount of GPU memory usage in bytes, taking into account all layers.
	unsigned long getMemoryUsageInBytes () const;

	osg::Texture* getTexture(unsigned int index, unsigned int layerIndex) {
		return _getTexture(index, layerIndex);
	}
	
	const osg::Texture* getTexture(unsigned int index, unsigned int layerIndex) const {
		return _getTexture(index, layerIndex);
	}

	unsigned int getImageWidth() const {
		return _imgWidth;
	}

	unsigned int getImageHeight() const {
		return _imgHeight;
	}

	const GlyphRenderer* getGlyphRenderer() const {
		return _renderer;
	}

	Layers& getLayers() { 
		return _layers; 
	}
	
	const Layers& getLayers() const {
		return _layers;
	}
	
	GlyphMap& getGlyphMap() {
		return _glyphs;
	}
	
	const GlyphMap& getGlyphMap() const {
		return _glyphs;
	}

	//! Fetches the current XYH position (or perhaps, "cursor", if you prefer) of the GlyphCache's
	//! internal rendering backend.
	void getXYH(double& x, double& y, double& h) const {
		x = _x;
		y = _y;
		h = _h;
	} 

	/*
	TODO: Jaromir, do you need/use this???
	//! Why in the world would you call this? :)
	void setXYH(double x, double y, double h) {
		_x = x;
		_y = y;
		_h = h;
	}
	*/

private:
	bool _newImageAndTexture();

	void _writeImageVectorFiles(
		const std::string&,
		const std::string&,
		const Images&
	) const;

	osgCairo::Image* _getImage   (unsigned int, unsigned int) const;
	osg::Texture*    _getTexture (unsigned int, unsigned int) const;

	//! The "renderer" object, not bound to any local data.
	const GlyphRenderer* _renderer;

	Layers _layers;
	
	//! A map of external Pango glyph indexes to their internally CachedGlyph data structures.
	GlyphMap _glyphs;

	double       _x;
	double       _y;
	double       _h;
	unsigned int _imgWidth;
	unsigned int _imgHeight;
};

//! This is a small subclass of osg::Geometry that simplifies a lot of the tedious Geometry
//! Manipulation we are required to do.
class OSGPANGO_EXPORT GlyphGeometry: public osg::Geometry {
public:
	GlyphGeometry();

	bool finalize          ();
	bool pushCachedGlyphAt (const CachedGlyph* glyph, const osg::Vec2& position);

private:
	unsigned int _numQuads;
};

// We don't use an osg::ref_ptr here becase the Geometry will actually only be temporary.
// The newly allocated osg::Geometry will passed to an osg::Geode during finalize, and
// the Geode will properly dictate when the resources are freed.
typedef std::map<unsigned int, GlyphGeometry*> GlyphGeometryIndex;

}

#endif
