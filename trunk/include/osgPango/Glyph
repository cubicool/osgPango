// -*-c++-*- osgPango - Copyright (C) 2008 Jeremy Moles

#ifndef OSGPANGO_GLYPHCACHE
#define OSGPANGO_GLYPHCACHE

#include <map>
#include <osg/Geometry>
#include <osgCairo/SurfaceImage>

namespace osgPango {

class Font;

const unsigned int DEFAULT_GCW = 512;
const unsigned int DEFAULT_GCH = 512;

struct CachedGlyph {
	CachedGlyph(
		unsigned int     = 0,
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2(),
		const osg::Vec2& = osg::Vec2()
	);

	unsigned int img;
	osg::Vec2    origin;
	osg::Vec2    size;
	osg::Vec2    bl;
	osg::Vec2    br;
	osg::Vec2    ur;
	osg::Vec2    ul;
};

typedef std::pair<unsigned int, osg::Vec2> GlyphPositionPair;
typedef std::list<GlyphPositionPair>       GlyphPositionList;

enum GlyphEffectsMethod {
	GLYPH_EFFECTS_METHOD_DEFAULT,
	GLYPH_EFFECTS_METHOD_GLSL
};

// There is one GlyphCache object PER FONT object.
class GlyphCache: public osg::Referenced {
public:
	typedef std::map<unsigned int, CachedGlyph>                GlyphMap;
	typedef std::vector<osg::ref_ptr<osgCairo::SurfaceImage> > ImageVector;

	enum GlyphEffects {
		GLYPH_EFFECT_OUTLINE = 1,
		GLYPH_EFFECT_SHADOW  = 2
	};

	GlyphCache(unsigned int = 0, unsigned int = 0);

	const CachedGlyph* getCachedGlyph    (unsigned int);
	const CachedGlyph* createCachedGlyph (PangoFont*, PangoGlyphInfo*);

	osgCairo::SurfaceImage* getImage(unsigned int index, bool outline = false) {
		return _getImage(index, outline);
	}

	const osgCairo::SurfaceImage* getImage(unsigned int index, bool outline = false) const {
		return _getImage(index, outline);
	}

	unsigned int getNumImages() const {
		return _images.size();
	}

	void writeImagesAsFiles(const std::string&) const;

private:
	friend class Font;

	bool _newImage                        ();
	bool _confirmHorizontalSpaceAvailable (unsigned int);
	bool _confirmVerticalSpaceAvailable   (unsigned int);
	void _calculateInitialOrigin          ();

	osgCairo::SurfaceImage* _getImage(unsigned int, bool) const;

	// A container of texture image data where the glyphs are cached.
	ImageVector _images;
	ImageVector _outlines;

	// A map of external Pango glyph indexes to their internally CachedGlyph data structures.
	// We also have a flag of what effects to use, though their rendering method is passed
	// on from the text object.
	GlyphMap     _glyphs;
	unsigned int _glyphEffects;

	double       _x;
	double       _y;
	double       _h;
	double       _outlineSize;
	unsigned int _imgWidth;
	unsigned int _imgHeight;
	unsigned int _shadowOffset;
};

class GlyphGeometry: public osg::Geometry {
public:
	GlyphGeometry(bool = false);

	bool finalize(osg::Image*, osg::Image* = 0);

	bool pushCachedGlyphAt(
		const CachedGlyph*,
		const osg::Vec2&,
		double,
		unsigned int,
		GlyphEffectsMethod
	);

private:
	static osg::ref_ptr<osg::Vec3Array> _norms;
	static osg::ref_ptr<osg::Vec4Array> _cols;

	unsigned int _numQuads;
};

typedef std::vector<GlyphGeometry*> GlyphGeometryVector;

}

#endif
