// -*-c++-*- osgPango - Copyright (C) 2009 Jeremy Moles

#ifndef OSGPANGO_MULTITEXT
#define OSGPANGO_MULTITEXT

#include <osgPango/Text>

namespace osgPango {

class TextRenderer;

struct OSGPANGO_EXPORT Renderer {
	PangoRenderer parent_instance;
	TextRenderer* renderer;

	osg::Vec3 fg;

	mutable OpenThreads::Mutex* mutex;
};

struct OSGPANGO_EXPORT RendererClass {
	PangoRendererClass class_instance;
};

class OSGPANGO_EXPORT TextRenderer {
public:
	TextRenderer();

	static void _drawGlyphs(PangoRenderer*, PangoFont*, PangoGlyphString*, int, int);

	static void cleanup() {
		delete _renderer->mutex;

		g_object_unref(_renderer);
	}

	// Derived classes be sure and override this.
	virtual void drawGlyphs(PangoFont*, PangoGlyphString*, int, int) = 0;

	// A lot of the context magic happens here.
	void drawLayout(PangoLayout* layout, unsigned int x = 0, unsigned int y = 0);

protected:
	const osg::Vec3* _getRequestedPangoColor() const;

private:
	static Renderer* _renderer;
};

class OSGPANGO_EXPORT Text: public TextRenderer, public osg::MatrixTransform {
public:
	typedef std::map<PangoFont*, osg::ref_ptr<GlyphCache> >    FontMap;
	typedef std::pair<PangoFont*, osg::Vec3>                   GlyphGeometryMapKey;
	typedef std::map<GlyphGeometryMapKey, GlyphGeometryVector> GlyphGeometryMap;

	Text();

	virtual ~Text() {
	}
	
	virtual void drawGlyphs(PangoFont*, PangoGlyphString*, int, int);

	void addText        (const std::string&, int, int);
	void writeAllImages (const std::string&);
	bool finalize       ();
	void setPosition    (const osg::Vec3&);

	const osg::Vec2& getSize() {
		return _size;
	}

	const osg::Vec2& getSize() const {
		return _size;
	}

	osg::Vec2 getEffectsSize() {
		return _effectsSize;
	}

	const osg::Vec2& getEffectsSize() const {
		return _effectsSize;
	}

	osg::Vec2 getOrigin() {
		return _origin;
	}

	const osg::Vec2& getOrigin() const {
		return _origin;
	}

	unsigned int getBaseline() const {
		return _baseline;
	}

	osg::Geode* getGeode() {
		return dynamic_cast<osg::Geode*>(getChild(0));
	}

	const osg::Geode* getGeode() const {
		return dynamic_cast<const osg::Geode*>(getChild(0));
	}

	osg::Vec3 getPosition         () const;
	osg::Vec2 getOriginBaseline   () const;
	osg::Vec2 getOriginTranslated () const;

private:
	FontMap          _fontMap;
	GlyphGeometryMap _ggMap;

	osg::Vec2 _size;
	osg::Vec2 _effectsSize;
	osg::Vec2 _origin;

	int _lastX;
	int _lastY;
	int _baseline;
};

}

#endif
