// -*-c++-*- osgPango - Copyright (C) 2008 Jeremy Moles

#ifndef OSGPANGO_TEXT
#define OSGPANGO_TEXT

#include <osg/Geode>
#include <osg/MatrixTransform>
#include <osgPango/String>
#include <osgPango/Font>

namespace osgPango {

class TextRenderer;

struct OSGPANGO_EXPORT Renderer {
	PangoRenderer parent_instance;
	TextRenderer* renderer;

	osg::Vec3 fg;

	mutable OpenThreads::Mutex* mutex;
};

struct OSGPANGO_EXPORT RendererClass {
	PangoRendererClass class_instance;
};

class OSGPANGO_EXPORT TextRenderer {
public:
	TextRenderer();

	static void _drawGlyphs(PangoRenderer*, PangoFont*, PangoGlyphString*, int, int);

	static void cleanup() {
		delete _renderer->mutex;

		g_object_unref(_renderer);
	}

	// Derived classes be sure and override this.
	virtual void drawGlyphs(PangoFont*, PangoGlyphString*, int, int) = 0;

	// A lot of the context magic happens here.
	void drawLayout(PangoLayout* layout, unsigned int x = 0, unsigned int y = 0);

protected:
	const osg::Vec3* _getRequestedPangoColor() const;

private:
	static Renderer* _renderer;
};

class OSGPANGO_EXPORT Text: public TextRenderer, public osg::MatrixTransform {
public:
	enum Alignment {
		ALIGN_LEFT,
		ALIGN_CENTER,
		ALIGN_RIGHT,
		ALIGN_JUSTIFY
	};

	Text(Font* = 0, GlyphEffectsMethod = GLYPH_EFFECTS_METHOD_DEFAULT);

	virtual ~Text() {
		g_object_unref(_layout);
	}
	
	virtual void drawGlyphs(PangoFont*, PangoGlyphString*, int, int);
	
	void setText         (const std::string&);
	void setAlignment    (Alignment);
	void setWidth        (unsigned int);
	void setPosition     (const osg::Vec3&);
	void setColor        (const osg::Vec3&);
	void setEffectsColor (const osg::Vec3&);
	void setAlpha        (double);

	Font* getFont() {
		return _font.get();
	}

	const Font* getFont() const {
		return _font.get();
	}

	const osg::Vec3& getColor() {
		return _color;
	}

	const osg::Vec3& getColor() const {
		return _color;
	}

	osg::Vec3 getEffectsColor() {
		return _effectsColor;
	}

	const osg::Vec3& getEffectsColor() const {
		return _effectsColor;
	}

	double getAlpha() const {
		return _alpha;
	}

	const osg::Vec2& getSize() {
		return _size;
	}

	const osg::Vec2& getSize() const {
		return _size;
	}

	osg::Vec2 getEffectsSize() {
		return _effectsSize;
	}

	const osg::Vec2& getEffectsSize() const {
		return _effectsSize;
	}

	osg::Vec2 getOrigin() {
		return _origin;
	}

	const osg::Vec2& getOrigin() const {
		return _origin;
	}

	unsigned int getBaseline() const {
		return _baseline;
	}

	osg::Geode* getGeode() {
		return dynamic_cast<osg::Geode*>(getChild(0));
	}

	const osg::Geode* getGeode() const {
		return dynamic_cast<const osg::Geode*>(getChild(0));
	}

	osg::Vec3 getPosition         () const;
	osg::Vec2 getOriginBaseline   () const;
	osg::Vec2 getOriginTranslated () const;

private:
	osg::ref_ptr<Font> _font;
	String             _text;
	PangoLayout*       _layout;
	GlyphPositionList  _pos;
	GlyphEffectsMethod _gem;
	osg::Vec3          _color;
	osg::Vec3          _effectsColor;
	double             _alpha;
	osg::Vec2          _size;
	osg::Vec2          _effectsSize;
	osg::Vec2          _origin;
	unsigned int       _baseline;
};

}

#endif
