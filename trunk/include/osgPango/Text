// -*-c++-*- osgPango - Copyright (C) 2009 Jeremy Moles

#ifndef OSGPANGO_TEXT
#define OSGPANGO_TEXT

#include <osg/Geode>
#include <osg/MatrixTransform>
#include <osgPango/String>
#include <osgPango/Context>

namespace osgPango {

class TextRenderer;

struct OSGPANGO_EXPORT Renderer {
	PangoRenderer parent_instance;
	TextRenderer* renderer;
};

struct OSGPANGO_EXPORT RendererClass {
	PangoRendererClass class_instance;
};

class OSGPANGO_EXPORT TextRenderer {
public:
	TextRenderer();

	static void _drawGlyphs(PangoRenderer*, PangoFont*, PangoGlyphString*, int, int);

	static void cleanup() {
		// delete _mutex;

		g_object_unref(_renderer);
	}

	// Derived classes be sure and override this.
	virtual void drawGlyphs(PangoFont*, PangoGlyphString*, int, int) = 0;

	// A lot of the context magic happens here.
	void drawLayout(PangoLayout* layout, unsigned int x = 0, unsigned int y = 0);

protected:
	const osg::Vec3*   _getRequestedPangoColor() const;
	const std::string& _getRequestedGlyphCacheRenderer() const;

private:
	static Renderer*   _renderer;
	static std::string _gcr;
	static osg::Vec3   _fg;

	// mutable OpenThreads::Mutex* _mutex;
};

class OSGPANGO_EXPORT TextOptions: public osg::Referenced {
public:
	enum Alignment {
		ALIGN_LEFT,
		ALIGN_CENTER,
		ALIGN_RIGHT,
		ALIGN_JUSTIFY
	};
	
	TextOptions(
		const std::string& = "",
		Alignment          = ALIGN_LEFT,
		int                = -1,
		int                = -1,
		int                = -1,
		int                = -1
	);

	virtual ~TextOptions();

	void setFontDescription (const std::string&);
	void setFontFamily      (const std::string&);
	void setFontStyle       (PangoStyle);
	void setFontVariant     (PangoVariant);
	void setFontWeight      (PangoWeight);
	void setFontSize        (int);
	bool setupPangoLayout   (PangoLayout*) const;

	Alignment alignment;
	int       width;
	int       height;
	int       indent;
	int       spacing;

private:
	void _unrefFontDescription();
	
	PangoFontDescription* _description;
};

class OSGPANGO_EXPORT Text: public TextRenderer, public osg::MatrixTransform {
public:
	typedef std::pair<PangoFont*, osg::Vec3>                   GlyphGeometryMapKey;
	typedef std::map<GlyphGeometryMapKey, GlyphGeometryVector> GlyphGeometryMap;

	Text();

	virtual ~Text() {
	}
	
	virtual void drawGlyphs(PangoFont*, PangoGlyphString*, int, int);

	void addText        (const std::string&, int, int, const TextOptions& = TextOptions());
	void writeAllImages (const std::string&);
	bool finalize       ();
	void setPosition    (const osg::Vec3&);

	const osg::Vec2& getSize() {
		return _size;
	}

	const osg::Vec2& getSize() const {
		return _size;
	}

	osg::Vec2 getEffectsSize() {
		return _effectsSize;
	}

	const osg::Vec2& getEffectsSize() const {
		return _effectsSize;
	}

	osg::Vec2 getOrigin() {
		return _origin;
	}

	const osg::Vec2& getOrigin() const {
		return _origin;
	}

	unsigned int getBaseline() const {
		return _baseline;
	}

	osg::Geode* getGeode() {
		return dynamic_cast<osg::Geode*>(getChild(0));
	}

	const osg::Geode* getGeode() const {
		return dynamic_cast<const osg::Geode*>(getChild(0));
	}

	osg::Vec3 getPosition         () const;
	osg::Vec2 getOriginBaseline   () const;
	osg::Vec2 getOriginTranslated () const;

private:
	GlyphGeometryMap _ggMap;
	osg::Vec2        _size;
	osg::Vec2        _effectsSize;
	osg::Vec2        _origin;
	int              _lastX;
	int              _lastY;
	int              _baseline;
};

}

#endif
