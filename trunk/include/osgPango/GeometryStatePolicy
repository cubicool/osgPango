#ifndef OSGPANGO_GEOEMETRY_STATE
#define OSGPANGO_GEOEMETRY_STATE

#include <map>
#include <pango/pangocairo.h>
#include <osg/Geometry>
#include <osg/Geode>
#include <osg/Texture>
#include <osgPango/Export>
#include <osgPango/Glyph>

namespace osgPango {

class BaseGeometryState {
public:
	BaseGeometryState();

	void setAlpha(float alpha) {
		_alpha = alpha;
	}

	float getAlpha() const { 
		return _alpha; 
	}

protected:
	float           _alpha;
};

class TextEnvGeometryState : public BaseGeometryState {
public:
  void apply(osg::Geode *) const;
  void apply(osg::Geometry *, const GlyphGeometryState &) const;
};

class GLSLGeometryState  : public BaseGeometryState {
public:
	GLSLGeometryState();

  void apply(osg::Geode *) const;
  void apply(osg::Geometry *, const GlyphGeometryState &) const;

	void setVertexShader(const std::string& shader) {
		_vertexShader = shader; 
	}
	
	const std::string& getVertexShader() const {
		return _vertexShader;
	}

	void setFragmentShader(const std::string &shader) {
		_fragmentShader = shader; 
	}

	const std::string& getFragmentShader() const {
		return _fragmentShader;
	}

protected:
	std::string						_vertexShader,
												_fragmentShader;
};

} //osgPango

#endif