// -*-c++-*- Copyright (C) 2010 osgPango Development Team
// $Id$

#ifndef OSGPANGO_GLYPHLAYER
#define OSGPANGO_GLYPHLAYER

#include <osg/Texture>
#include <osgCairo/Image>
#include <osgPango/GlyphLayerInterface>

namespace osgPango {

class OSGPANGO_EXPORT GlyphLayer: public osg::Referenced {
public:
	GlyphLayer(cairo_format_t = CAIRO_FORMAT_A8);

	// Render custom shape of glyph.
	virtual bool render(cairo_t*, cairo_glyph_t*, unsigned int, unsigned int);
	
	virtual osg::Vec4 getExtraGlyphExtents() const;

	cairo_format_t getCairoImageFormat() const {
		return _imageFormat;
	}
	
	void setCairoImageFormat(cairo_format_t format) {
		_imageFormat = format;
	}
		
protected:
	cairo_format_t  _imageFormat;
};

class OSGPANGO_EXPORT GlyphLayerOutline: public GlyphLayer {
public:
	GlyphLayerOutline(unsigned int = 2);
	
	virtual bool render(cairo_t*, cairo_glyph_t*, unsigned int, unsigned int);
	
	virtual osg::Vec4 getExtraGlyphExtents() const;
	
	void setOutline(unsigned int outline) {
		_outline = outline;
	}
	
	unsigned int getOutline() const {
		return _outline;
	}
	
private:
	unsigned int _outline;
};

class OSGPANGO_EXPORT GlyphLayerShadow: public GlyphLayerInterfaceOffset, public GlyphLayer {
public:
	GlyphLayerShadow(int = 1, int = 1);

	virtual bool render(cairo_t*, cairo_glyph_t*, unsigned int, unsigned int);
	
	virtual osg::Vec4 getExtraGlyphExtents() const;
};

class OSGPANGO_EXPORT GlyphLayerShadowBlur:
	public GlyphLayerInterfaceOffset,
	public GlyphLayerInterfaceBlur,
	public GlyphLayer
{
public:
	GlyphLayerShadowBlur(int = 1, int = 1, unsigned int = 2, unsigned int = 1);
	
	virtual bool render(cairo_t*, cairo_glyph_t*, unsigned int, unsigned int);
	
	virtual osg::Vec4 getExtraGlyphExtents() const;
};

}

#endif
